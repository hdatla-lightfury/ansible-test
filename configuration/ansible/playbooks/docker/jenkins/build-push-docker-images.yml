---
- name: Build and push Jenkins Docker image to AWS ECR
  hosts: localhost
  gather_facts: false
  collections:
    - amazon.aws
    - community.docker

  vars:
    aws_region: "{{ aws_region }}"
    dockerfile_dir: "{{ dockerfile_dir}}"
    ecr_repository: "{{ ecr_repository}}"
    docker_image_tag: "{{ docker_image_tag}}"

  tasks:

    - name: Ensure required variables are set
      assert:
        that:
          - aws_region is defined and aws_region | length > 0
          - dockerfile_dir is defined and dockerfile_dir | length > 0
          - ecr_repository is defined and ecr_repository | length > 0
          - docker_image_tag is defined and docker_image_tag | length > 0
        fail_msg: >
          One or more required variables are not set: aws_region, dockerfile_dir,
          ecr_repository, docker_image_tag. Please pass them via --extra-vars or set them in your inventory.        

    - name: Ensure ECR repository exists
      community.aws.ecs_ecr:
        name: "{{ ecr_repository }}"
        state: present
        region: "{{ aws_region }}"
      register: ecr_info

    - name: Set ECR registry and repo URL
      set_fact:
        ecr_repository_url: "{{ ecr_info.repository.repositoryUri }}"
        ecr_registry_url: "{{ ecr_info.repository.repositoryUri | regex_replace('/.*$', '') }}"

    - name: Get ECR token
      shell: "aws ecr get-login-password --region {{ aws_region}}"
      register: ecr_token

    - name: Log in to ECR registry
      community.docker.docker_login:
        registry: "{{ ecr_registry_url }}"
        username: "AWS"
        password: "{{ ecr_token.stdout }}"
        region: "{{ aws_region }}"

    - name: Build Docker image
      community.docker.docker_image:
        name: "{{ ecr_repository_url }}"
        tag: "{{ docker_image_tag }}"
        build:
          path: "{{ dockerfile_dir }}"
        source: build

    - name: Push Docker image to ECR
      community.docker.docker_image:
        name: "{{ ecr_repository_url }}"
        tag: "{{ docker_image_tag }}"
        push: true
