---
- name: Build and push Jenkins Docker image to AWS ECR
  hosts:  "{{ 'localhost' if docker_runtime_os == 'linux' else 'windows_host' }}"
  gather_facts: false
  collections:
    - amazon.aws
    - community.docker

  vars:
    aws_region: "{{ aws_region }}"
    dockerfile_dir: "{{ dockerfile_dir}}"
    ecr_repository: "{{ ecr_repository}}"
    docker_image_tag: "{{ docker_image_tag}}"
    target_service: "{{ target_service}}"

  tasks:
    - name: Ensure required variables are set
      assert:
        that:
          - aws_region is defined and aws_region | length > 0
          - dockerfile_dir is defined and dockerfile_dir | length > 0
          - ecr_repository is defined and ecr_repository | length > 0
          - docker_image_tag is defined and docker_image_tag | length > 0
        fail_msg: >
          One or more required variables are not set: aws_region, dockerfile_dir,
          ecr_repository, docker_image_tag. Please pass them via --extra-vars or set them in your inventory.        

    - name: Ensure ECR repository exists
      community.aws.ecs_ecr:
        name: "{{ ecr_repository }}"
        state: present
        region: "{{ aws_region }}"
      register: ecr_info

    - name: Set ECR registry and repo URL
      set_fact:
        ecr_repository_url: "{{ ecr_info.repository.repositoryUri }}"
        ecr_registry_url: "{{ ecr_info.repository.repositoryUri | regex_replace('/.*$', '') }}"

    - name: Get ECR token (cross-platform)
      shell: "aws ecr get-login-password --region {{ aws_region }}"
      register: ecr_token
      when: docker_runtime_os in ['linux', 'windows']

    - name: Docker login to ECR registry (cross platform)
      shell: "echo {{ ecr_token.stdout }} | docker login --username AWS --password-stdin {{ ecr_registry_url }}"
      args:
        chdir: "{{ dockerfile_dir }}"
      when: docker_runtime_os in ["linux", "windows"]
    
    - name: Check if Docker image with the same tag already exists in ECR (only in production)
      shell: |
        aws ecr describe-images \
          --repository-name {{ ecr_repository }} \
          --image-ids imageTag={{ docker_image_tag }} \
          --region {{ aws_region }}
      register: image_check_result
      ignore_errors: true
      changed_when: false
      when: environment_name == "production"

    - name: Fail if image with this tag already exists in production
      fail:
        msg: >
          Docker image with tag '{{ docker_image_tag }}' already exists in ECR '{{ ecr_repository }}' in production.
          Please use a unique tag or delete the existing image before proceeding.
      when:
        - environment_name == "production"
        - image_check_result.rc == 0

    - name: Build final Docker image via docker-compose 
      shell: "docker compose build {{ target_service }}"
      args:
        chdir: "{{ dockerfile_dir }}"
      when: docker_runtime_os in ["linux", "windows"]
    
    - name: Extract image details built via docker-compose
      shell: docker compose config | yq '.services.{{ target_service }}.image'
      args:
        chdir: "{{ dockerfile_dir }}"
      register: image_name_result
      changed_when: false
      when: docker_runtime_os in ["linux", "windows"]

    - name: Parse Image Name and Tag
      set_fact:
        source_image: "{{ image_result.stdout.split(':')[0] }}"
        source_tag: "{{ image_result.stdout.split(':')[1] }}"
      when: docker_runtime_os in ["linux", "windows"]

    - name: Tag the built image for ECR
      shell: >
        docker tag {{ source_image }}:{{ source_tag }} {{ ecr_repository_url }}:{{ docker_image_tag }}
      when: docker_runtime_os in ["linux", "windows"]

    - name: Push Docker image to ECR
      shell: >
        docker push {{ ecr_repository_url }}:{{ docker_image_tag }}
      when: docker_runtime_os in ["linux", "windows"]
